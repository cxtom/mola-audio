{"version":3,"sources":["Audio.js"],"names":["type","level","audioPool","Audio","args","state","playing","onClick","bind","onPlay","onPause","componentDidMount","on","refs","audio","push","props","playImage","preLoadImage","Image","src","componentWillUnmount","off","index","indexOf","splice","setState","forEach","pause","render","className","style","top","left","width","height","image","autoPlay","backgroundImage","displayName","propTypes","number","isRequired","string","bool","defaultProps"],"mappings":"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","file":"Audio.js","sourcesContent":["/**\n * @file 音频组件\n * @author cxtom <cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\n\nimport {\n    registerComponent,\n    MOLA_COMPONENT_LEVEL_ATOM,\n    px2rem\n} from 'mola';\n\nimport cx from 'classnames';\nimport domUtil from 'melon/common/util/dom';\n\nexport const type = 'Audio';\nexport const level = MOLA_COMPONENT_LEVEL_ATOM;\n\nlet audioPool = [];\n\nexport class Audio extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.state = {\n            playing: false\n        };\n        this.onClick = this.onClick.bind(this);\n        this.onPlay = this.onPlay.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount() {\n        domUtil.on(this.refs.audio, 'play', this.onPlay);\n        domUtil.on(this.refs.audio, 'pause', this.onPause);\n        domUtil.on(this.refs.audio, 'ended', this.onPause);\n\n        audioPool.push(this.refs.audio);\n\n        if (this.props.playImage) {\n            const preLoadImage = new Image();\n            preLoadImage.src = this.props.playImage;\n        }\n    }\n\n    componentWillUnmount() {\n        domUtil.off(this.refs.audio, 'play', this.onPlay);\n        domUtil.off(this.refs.audio, 'pause', this.onPause);\n        domUtil.off(this.refs.audio, 'ended', this.onPause);\n\n        const index = audioPool.indexOf(this.refs.audio);\n        if (index > -1) {\n            audioPool = audioPool.splice(index, 1);\n        }\n    }\n\n    onPlay() {\n        this.setState({playing: true});\n        audioPool.forEach(audio => {\n            if (audio !== this.refs.audio) {\n                audio.pause();\n            }\n        });\n    }\n\n    onPause() {\n        this.setState({playing: false});\n    }\n\n    onClick() {\n        const audio = this.refs.audio;\n        audio[this.state.playing ? 'pause' : 'play']();\n    }\n\n    render() {\n\n        let {\n            className = null,\n            style = null,\n            top,\n            left,\n            width,\n            height,\n            image,\n            playImage,\n            src,\n            autoPlay\n        } = this.props;\n\n        const playing = this.state.playing;\n\n        return (\n            <div\n                onClick={this.onClick}\n                className={cx('mola-audio', className, {'state-playing': playing})}\n                data-type=\"btn\"\n                data-click={`{\"mod\": \"audio\", \"act\": \"b_${playing ? 'pause' : 'play'}\"}`}\n                style={{\n                    ...style,\n                    top: px2rem(top),\n                    left: px2rem(left),\n                    width: px2rem(width),\n                    height: px2rem(height),\n                    backgroundImage: `url(${playing && playImage ? playImage : image})`\n                }}>\n                <audio\n                    src={src}\n                    autoBuffer\n                    autoPlay={autoPlay}\n                    ref=\"audio\" />\n            </div>\n        );\n    }\n\n}\n\nAudio.displayName = type;\n\nAudio.propTypes = {\n    top: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    src: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    playImage: PropTypes.string,\n    autoPlay: PropTypes.bool.isRequired\n};\n\nAudio.defaultProps = {\n    top: 0,\n    left: 0,\n    width: 50,\n    height: 50,\n    autoPlay: false\n};\n\nexport default registerComponent(type, level)(Audio);\n"]}